name: Publish release

on:
  push:
    tags:
      - '*'

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_DEFAULT_REGION: 'eu-west-1'

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2.3.4

        # Needed to be able to run `npm ci`. It fails if we try to install libraries from a github repo
        # e.g. "wpt": "git+https://github.com/Woopra/browser-tracker.git#v5.1.20",
      - name: Reconfigure git to use HTTP authentication
        run: >
          git config --global url."https://github.com/".insteadOf
          ssh://git@github.com/

      - uses: actions/setup-node@v2
        with:
          node-version: '16.x'
          registry-url: 'https://registry.npmjs.org'

      - name: Build dist
        run: |
          npm install
          npm run build:all

      - name: Get version
        id: get_version
        run: |
          echo "VERSION=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_ENV
          echo This will be version $VERSION

      - name: Determine release type
        run: |
          GIT_TAG_REGEX="^[0-9]\{1,3\}\.[0-9]\{1,2\}\.[0-9]\{1,2\}$"
          LATEST_TAG=`git tag | grep $GIT_TAG_REGEX | sort -t. -k 1,1n -k 2,2n -k 3,3n -k 4,4n | sed '1!G;h;$!d' | sed -n 1p`
          echo "LATEST_TAG=${LATEST_TAG}" >> $GITHUB_ENV
          echo Latest version is $LATEST_TAG

      - name: Get base32 version
        id: get_base32_version
        run: |
          source ./release/githubActions/workflows.config
          echo "BASE_32_VERSION=${BASE_32_VERSION}" >> $GITHUB_ENV

      - name: Upload Base32 to S3
        run: |
          aws s3 cp ./dist s3://${{ secrets.AWS_S3_BUCKET }}/web-sdk-base32-releases/$BASE_32_VERSION/ --exclude "*.html" --recursive --acl public-read

      - name: Upload Release to S3
        run: |
          aws s3 cp ./dist s3://${{ secrets.AWS_S3_BUCKET }}/web-sdk-releases/$VERSION/ --exclude "*.html" --recursive --acl public-read

      - name: Publish to NPM
        run: |
          if [ "$VERSION" == "$LATEST_TAG" ]
          then
            echo Publishing latest tag $VERSION
            npm publish
          else
            echo Publishing rc tag $VERSION
            npm publish --tag rc
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}

      - name: Extract release notes from CHANGELOG
        if: ${{ env.VERSION == env.LATEST_TAG }}
        id: extract-release-notes
        uses: ffurrer2/extract-release-notes@v1

      - name: Create Github Release
        if: ${{ env.VERSION == env.LATEST_TAG }}
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          body: ${{ steps.extract-release-notes.outputs.release_notes }}
          draft: true

      - name: Send artifacts to Sentry
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
        run: |
          curl -sL https://sentry.io/get-cli/ | bash
          sentry-cli releases new $VERSION --log-level=DEBUG
          sentry-cli releases files $VERSION upload-sourcemaps ./dist/
          sentry-cli releases files $VERSION upload-sourcemaps ./lib/
          sentry-cli releases finalize $VERSION
          sentry-cli --version

      - name: Run build for Surge
        # Legacy: Surge uses the NODE_ENV=test + TEST_ENV=deployment
        run: |
          if [ "$VERSION" == "$LATEST_TAG" ]
          then
            TEST_ENV=deployment npm run build:test
          fi

      - name: Publish latest version to Surge
        if: ${{ env.VERSION == env.LATEST_TAG }}
        uses: dswistowski/surge-sh-action@v1.0.1
        with:
          domain: 'https://latest-onfido-sdk-ui-onfido.surge.sh'
          project: './dist/'
          login: ${{ secrets.SURGE_LOGIN }}
          token: ${{ secrets.SURGE_TOKEN }}
