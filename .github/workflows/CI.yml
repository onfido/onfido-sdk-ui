name: CI

on:
  pull_request:

env:
  BROWSERSTACK_ACCESS_KEY: ${{ secrets.BROWSERSTACK_ACCESS_KEY }}
  BROWSERSTACK_USERNAME: ${{ secrets.BROWSERSTACK_USERNAME }}
  PR_NUMBER: ${{ github.event.pull_request.number }}
  SDK_TOKEN_FACTORY_SECRET: ${{ secrets.SDK_TOKEN_FACTORY_SECRET}}

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - NODE_ENV: test
          - NODE_ENV: production
          - NODE_ENV: staging
    steps:
      - uses: actions/checkout@v2.3.4

        # Needed to be able to run `npm ci`. It fails if we try to install libraries from a github repo
        # e.g. "wpt": "git+https://github.com/Woopra/browser-tracker.git#v5.1.20",
      - name: Reconfigure git to use HTTP authentication
        run: >
          git config --global url."https://github.com/".insteadOf
          ssh://git@github.com/

      - uses: actions/setup-node@v2
        with:
          node-version: '14.x'
          registry-url: 'https://registry.npmjs.org'

      - name: Cache node modules
        uses: actions/cache@v2
        with:
          path: |
            ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install Dependencies
        run: npm install

      - name: Run dependencies audit
        if: matrix.NODE_ENV == 'production'
        uses: oke-py/npm-audit-action@v1.7.2
        with:
          audit_level: moderate
          production_flag: true
          github_token: ${{ secrets.GITHUB_TOKEN }}
          issue_assignees: kopijunkie
          issue_labels: vulnerability
          dedupe_issues: true

      - name: Run linters
        if: matrix.NODE_ENV == 'test'
        run: npm run check

      - name: Run build
        # Legacy: For "$NODE_ENV" == "production" Surge uses the NODE_ENV=test + TEST_ENV=deployment
        run: |
          if [ ${{ matrix.NODE_ENV}} == "test" ]
          then
            npm run build:test
          elif [ ${{ matrix.NODE_ENV }} == "production" ]
          then
            TEST_ENV=deployment npm run build:test
          elif [ ${{ matrix.NODE_ENV }}  == "staging" ]
          then
            NODE_ENV=staging npm run build
          fi

      - name: Run unit tests
        if: matrix.NODE_ENV == 'test'
        run: npm run test:unit

      - name: Run integration tests
        if: matrix.NODE_ENV == 'test'
        run: npm run test:integration

      - name: Run UI tests
        if: matrix.NODE_ENV == 'test'
        run: npm run test:ui

      - name: Create Surge Domain
        if: ${{ matrix.NODE_ENV == 'production' || matrix.NODE_ENV == 'staging' }}
        run: |
          IFS='/' read -ra REPO_SLUG_ARRAY <<< "$GITHUB_REPOSITORY"
          REPO_OWNER=${REPO_SLUG_ARRAY[0]}
          REPO_NAME=${REPO_SLUG_ARRAY[1]}
          if [ ${{ matrix.NODE_ENV }} == "production" ]
          then
            echo "SURGE_DOMAIN=https://${PR_NUMBER}-pr-${REPO_NAME}-${REPO_OWNER}.surge.sh" >> $GITHUB_ENV
          else
            echo "SURGE_DOMAIN=https://staging-${PR_NUMBER}-pr-${REPO_NAME}-${REPO_OWNER}.surge.sh" >> $GITHUB_ENV
          fi

      - name: Publish to Surge
        if: ${{ matrix.NODE_ENV == 'production' || matrix.NODE_ENV == 'staging' }}
        uses: dswistowski/surge-sh-action@v1.0.1
        with:
          domain: ${{ env.SURGE_DOMAIN }}
          project: './dist'
          login: ${{ secrets.SURGE_LOGIN }}
          token: ${{ secrets.SURGE_TOKEN }}

      - name: Add comment with Surge link to PR
        if: ${{ matrix.NODE_ENV == 'production' || matrix.NODE_ENV == 'staging' }}
        uses: mshick/add-pr-comment@v1
        with:
          message: ${{ env.SURGE_DOMAIN }} ðŸš€
          repo-token: ${{ secrets.GITHUB_TOKEN }}
