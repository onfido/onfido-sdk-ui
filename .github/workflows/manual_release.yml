name: Manual Release

on:
  workflow_dispatch:
    inputs:
      release_version:
        description: 'Release version:'
        required: true
        type: string
      base32_version:
        description: 'Base32 version'
        required: true
        type: string
      is_lts:
        description: 'LTS release'
        required: true
        type: boolean
        default: false

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      GIT_TERMINAL_PROMPT: 0
      RELEASE_VERSION: ${{ github.event.inputs.release_version }}
      BASE32_VERSION: ${{ github.event.inputs.base32_version }}
      IS_LTS: ${{ github.event.inputs.is_lts }}

    steps:
      - uses: actions/checkout@v3

      # - name: Setup Env
      #   run: |
      #     # @TODO: Rename to release once workflow is completed
      #     echo "BRANCH_NAME=poc-release/$RELEASE_VERSION" >> $GITHUB_ENV
    
      # - name: Setup Git
      #   run: |
      #     git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}
      #     git config --global user.email "${{ github.actor }}@users.noreply.github.com"
      #     git config --global user.name "${{ github.actor }}"
      #     git config --global --add url."https://github.com/".insteadOf ssh://git@github.com/

      # - name: Validate Input
      #   uses: actions/github-script@v6
      #   with:
      #     script: |
      #       const { RELEASE_VERSION, BASE32_VERSION } = process.env
      #       const validReleaseVersion = /^\d{1,2}\.\d{1,2}\.\d{1,2}(\-rc\.\d{1,2})?$/.test(RELEASE_VERSION)
      #       const validBase32 = /^[A-Z]{2}$/.test(BASE32_VERSION)
            
      #       if(!validReleaseVersion){
      #         core.setFailed("Invalid release version, use format: major.minor.patch(-rc.*) (6.20.0 / 6.20.0-rc.1)");
      #       }
      #       if(!validBase32){
      #         core.setFailed("Invalid base32 version, use two capital letters. Like: AA")
      #       }

      - uses: actions/setup-node@v2
        with:
          node-version: '16.x'
          registry-url: 'https://registry.npmjs.org'

      - name: Cache node modules
        uses: actions/cache@v2
        with:
          path: |
            ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      
      - name: Install node_modules for release workflow
        run: npm install semver-sort
          
      # - name: Checkout & pull release branch
      #   run: |        
      #     git fetch origin
      #     git checkout -b $BRANCH_NAME

      #     existed_in_remote=$(git ls-remote --heads origin refs/heads/$branch_name)
      #     echo "existed_in_remote: ${existed_in_remote}"
      #     if [[ $existed_in_remote ]] 
      #     then
      #       git pull origin $BRANCH_NAME
      #     fi

      - name: Update files with new version
        uses: actions/github-script@v6
        with:
          script: |
            const path = require('path')
            const scriptPath = path.resolve('./release-poc/updateFiles.js')
            console.log('scriptPath', scriptPath)
            await require(scriptPath)({context})
            
      - name: Git diff
        run: |
          git diff

      # - name: Create & commit PoC file
      #   run: |
      #     touch input-poc.txt
      #     echo release_version="$RELEASE_VERSION" >> input-poc.txt
      #     echo base32_version="$BASE32_VERSION" >> input-poc.txt
      #     echo is_lts="$IS_LTS" >> input-poc.txt

      #     git add input-poc.txt
      #     git commit -m "Add poc file"
        
      # - name: Push commits
      #   run: |
      #     # git push --set-upstream origin poc-release/1.0.4
      #     git push origin $BRANCH_NAME